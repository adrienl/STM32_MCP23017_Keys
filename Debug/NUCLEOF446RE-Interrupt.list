
NUCLEOF446RE-Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce0  08004ce0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce8  08004ce8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08004cfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08004cfc  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab5  00000000  00000000  0002c5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208e6  00000000  00000000  0002f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d68f  00000000  00000000  0004fd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6fed  00000000  00000000  0005d3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012439a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  001243ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004cb0 	.word	0x08004cb0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004cb0 	.word	0x08004cb0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MCP23017_AddrConv>:
  MCP23017_CON_HAEN =    0b00001000,
  MCP23017_CON_ODR =     0b00000100,
  MCP23017_CON_INTPOL =  0b00000010,
} MCP23017_IOCONSetup;

uint8_t MCP23017_AddrConv(uint8_t addr){
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  if (addr > 7){
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b07      	cmp	r3, #7
 8000516:	d901      	bls.n	800051c <MCP23017_AddrConv+0x14>
    addr = 7;
 8000518:	2307      	movs	r3, #7
 800051a:	71fb      	strb	r3, [r7, #7]
  }
  uint8_t fixedPart = 0b0100;
 800051c:	2304      	movs	r3, #4
 800051e:	73fb      	strb	r3, [r7, #15]
  uint8_t filteredAddr = 0b0000111 & addr;
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	73bb      	strb	r3, [r7, #14]
  uint8_t slaveAddr = fixedPart << 3 | filteredAddr;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	b25a      	sxtb	r2, r3
 800052e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000532:	4313      	orrs	r3, r2
 8000534:	b25b      	sxtb	r3, r3
 8000536:	737b      	strb	r3, [r7, #13]
  return slaveAddr;
 8000538:	7b7b      	ldrb	r3, [r7, #13]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <MCP23017_I2CRead>:

uint8_t MCP23017_I2CRead(uint16_t addr, uint16_t reg){
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af04      	add	r7, sp, #16
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	80fb      	strh	r3, [r7, #6]
 8000554:	4613      	mov	r3, r2
 8000556:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t data;
	status = HAL_I2C_Mem_Read(&hi2c1, addr << 1 | 0b00000001, reg, 1, &data, 1, 10);
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	b21b      	sxth	r3, r3
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	b21b      	sxth	r3, r3
 8000564:	b299      	uxth	r1, r3
 8000566:	88ba      	ldrh	r2, [r7, #4]
 8000568:	230a      	movs	r3, #10
 800056a:	9302      	str	r3, [sp, #8]
 800056c:	2301      	movs	r3, #1
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	f107 030e 	add.w	r3, r7, #14
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MCP23017_I2CRead+0x44>)
 800057a:	f001 f97d 	bl	8001878 <HAL_I2C_Mem_Read>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]
 // uint8_t data = Wire.read();
 // Wire.endTransmission();
 // sleep(5);
  //return data;
	//HAL_Delay(5);
	return data;
 8000582:	7bbb      	ldrb	r3, [r7, #14]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000028 	.word	0x20000028

08000590 <MCP23017_I2CWrite>:

void MCP23017_I2CWrite(uint16_t addr, uint16_t reg, uint8_t data){
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af04      	add	r7, sp, #16
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
 800059a:	460b      	mov	r3, r1
 800059c:	80bb      	strh	r3, [r7, #4]
 800059e:	4613      	mov	r3, r2
 80005a0:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, addr << 1, reg, 1, &data, 1, 10);
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b299      	uxth	r1, r3
 80005a8:	88ba      	ldrh	r2, [r7, #4]
 80005aa:	230a      	movs	r3, #10
 80005ac:	9302      	str	r3, [sp, #8]
 80005ae:	2301      	movs	r3, #1
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	1cfb      	adds	r3, r7, #3
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MCP23017_I2CWrite+0x40>)
 80005ba:	f001 f863 	bl	8001684 <HAL_I2C_Mem_Write>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
 // Wire.beginTransmission(addr);
 // Wire.write(reg);
 // Wire.write(data);
 // Wire.endTransmission();
 // sleep(50);
	HAL_Delay(50);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f000 fbd4 	bl	8000d70 <HAL_Delay>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000028 	.word	0x20000028

080005d4 <MCP23017_readNotes>:

uint16_t MCP23017_readNotes(uint8_t addr){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
  uint8_t AData = MCP23017_I2CRead(addr, MCP23017_GPIOA);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	2112      	movs	r1, #18
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffaf 	bl	8000548 <MCP23017_I2CRead>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]
  uint8_t BData = MCP23017_I2CRead(addr, MCP23017_GPIOB);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2113      	movs	r1, #19
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffa7 	bl	8000548 <MCP23017_I2CRead>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73bb      	strb	r3, [r7, #14]
  return BData << 8 | AData;
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	b21b      	sxth	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b21b      	sxth	r3, r3
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <MCP23017_init>:

void MCP23017_init(uint8_t addr){
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	71fb      	strb	r3, [r7, #7]
  MCP23017_I2CWrite(addr, MCP23017_IOCON_AB, MCP23017_CON_MIRROR | MCP23017_CON_ODR);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	b29b      	uxth	r3, r3
 8000624:	2244      	movs	r2, #68	; 0x44
 8000626:	210a      	movs	r1, #10
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffb1 	bl	8000590 <MCP23017_I2CWrite>
  //uint8_t config = MCP23017_I2CRead(_devAddr, MCP23017_IOCON_AB);

  MCP23017_I2CWrite(addr, MCP23017_IODIRA, 0b11111111); //I/O DIRECTION REGISTER (ADDR 0x00)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	b29b      	uxth	r3, r3
 8000632:	22ff      	movs	r2, #255	; 0xff
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffaa 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_IODIRB, 0b11111111); //I/O DIRECTION REGISTER (ADDR 0x00)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	b29b      	uxth	r3, r3
 8000640:	22ff      	movs	r2, #255	; 0xff
 8000642:	2101      	movs	r1, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffa3 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_GPPUA, 0b11111111); //GPIO PULL-UP RESISTOR REGISTER (ADDR 0x06)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b29b      	uxth	r3, r3
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	210c      	movs	r1, #12
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff9c 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_GPPUB, 0b11111111); //GPIO PULL-UP RESISTOR REGISTER (ADDR 0x06)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	b29b      	uxth	r3, r3
 800065c:	22ff      	movs	r2, #255	; 0xff
 800065e:	210d      	movs	r1, #13
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff95 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_GPINTENA, 0b11111111); //INTERRUPT-ON-CHANGE PINS (ADDR 0x02)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	b29b      	uxth	r3, r3
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	2104      	movs	r1, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff8e 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_GPINTENB, 0b11111111); //INTERRUPT-ON-CHANGE PINS (ADDR 0x02)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	b29b      	uxth	r3, r3
 8000678:	22ff      	movs	r2, #255	; 0xff
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff87 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_INTCONA, 0b00000000); //INTERRUPT-ON-CHANGE CONTROL REGISTER (ADDR 0x04)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	b29b      	uxth	r3, r3
 8000686:	2200      	movs	r2, #0
 8000688:	2108      	movs	r1, #8
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff80 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_INTCONB, 0b00000000); //INTERRUPT-ON-CHANGE CONTROL REGISTER (ADDR 0x04)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	b29b      	uxth	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	2109      	movs	r1, #9
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff79 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_DEFVALA, 0b11111111); //DEFAULT VALUE REGISTER (ADDR 0x03)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	22ff      	movs	r2, #255	; 0xff
 80006a4:	2106      	movs	r1, #6
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff72 	bl	8000590 <MCP23017_I2CWrite>
  MCP23017_I2CWrite(addr, MCP23017_DEFVALB, 0b11111111); //DEFAULT VALUE REGISTER (ADDR 0x03)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	2107      	movs	r1, #7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff6b 	bl	8000590 <MCP23017_I2CWrite>

  //Serial.println("MCP23017 Initiated");
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fadf 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f831 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f8f5 	bl	80008c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f8c9 	bl	800086c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006da:	f000 f899 	bl	8000810 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t devAddr = MCP23017_AddrConv(0);
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff ff12 	bl	8000508 <MCP23017_AddrConv>
 80006e4:	4603      	mov	r3, r0
 80006e6:	71fb      	strb	r3, [r7, #7]
  MCP23017_init(devAddr);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff93 	bl	8000616 <MCP23017_init>

  while (1)
  {

	if (octaveIntTriggered == 1){
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <main+0x68>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d1fb      	bne.n	80006f0 <main+0x2c>
		octaveIntTriggered = 0;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <main+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
		uint16_t notes = MCP23017_readNotes(devAddr);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff67 	bl	80005d4 <MCP23017_readNotes>
 8000706:	4603      	mov	r3, r0
 8000708:	80bb      	strh	r3, [r7, #4]
		if (notes == 0xFFFF){
 800070a:	88bb      	ldrh	r3, [r7, #4]
 800070c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000710:	4293      	cmp	r3, r2
 8000712:	d105      	bne.n	8000720 <main+0x5c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2120      	movs	r1, #32
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <main+0x6c>)
 800071a:	f000 fe23 	bl	8001364 <HAL_GPIO_WritePin>
 800071e:	e7e7      	b.n	80006f0 <main+0x2c>
		}else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <main+0x6c>)
 8000726:	f000 fe1d 	bl	8001364 <HAL_GPIO_WritePin>
	if (octaveIntTriggered == 1){
 800072a:	e7e1      	b.n	80006f0 <main+0x2c>
 800072c:	200000c0 	.word	0x200000c0
 8000730:	40020000 	.word	0x40020000

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	; 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 faac 	bl	8004ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <SystemClock_Config+0xd4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <SystemClock_Config+0xd4>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <SystemClock_Config+0xd4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <SystemClock_Config+0xd8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000780:	4a22      	ldr	r2, [pc, #136]	; (800080c <SystemClock_Config+0xd8>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <SystemClock_Config+0xd8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a8:	2310      	movs	r3, #16
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fce8 	bl	8004198 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ce:	f000 f91b 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f988 	bl	8003b04 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007fa:	f000 f905 	bl	8000a08 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_I2C1_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_I2C1_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2C1_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_I2C1_Init+0x50>)
 800084e:	f000 fdd5 	bl	80013fc <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 f8d6 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000028 	.word	0x20000028
 8000864:	40005400 	.word	0x40005400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f003 ff16 	bl	80046d4 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f8ab 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000007c 	.word	0x2000007c
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MX_GPIO_Init+0xfc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <MX_GPIO_Init+0xfc>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <MX_GPIO_Init+0xfc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <MX_GPIO_Init+0xfc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a30      	ldr	r2, [pc, #192]	; (80009bc <MX_GPIO_Init+0xfc>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MX_GPIO_Init+0xfc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_GPIO_Init+0xfc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a29      	ldr	r2, [pc, #164]	; (80009bc <MX_GPIO_Init+0xfc>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_GPIO_Init+0xfc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_GPIO_Init+0xfc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <MX_GPIO_Init+0xfc>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_GPIO_Init+0xfc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	481d      	ldr	r0, [pc, #116]	; (80009c0 <MX_GPIO_Init+0x100>)
 800094c:	f000 fd0a 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000956:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4817      	ldr	r0, [pc, #92]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000968:	f000 fb68 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096c:	2320      	movs	r3, #32
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <MX_GPIO_Init+0x100>)
 8000984:	f000 fb5a 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_GPIO_Init+0x100>)
 80009a0:	f000 fb4c 	bl	800103c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2028      	movs	r0, #40	; 0x28
 80009aa:	f000 fae0 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ae:	2028      	movs	r0, #40	; 0x28
 80009b0:	f000 faf9 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020800 	.word	0x40020800

080009c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]

  if(GPIO_Pin == GPIO_PIN_13) {
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d8:	d104      	bne.n	80009e4 <HAL_GPIO_EXTI_Callback+0x1c>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009da:	2120      	movs	r1, #32
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x38>)
 80009de:	f000 fcda 	bl	8001396 <HAL_GPIO_TogglePin>
	octaveIntTriggered = 1;
	//Then, must read MCP23017 values, otherwise, no more interrupt triggered.
  } else {
    __NOP();
  }
}
 80009e2:	e008      	b.n	80009f6 <HAL_GPIO_EXTI_Callback+0x2e>
  } else if (GPIO_Pin == GPIO_PIN_10) {
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ea:	d103      	bne.n	80009f4 <HAL_GPIO_EXTI_Callback+0x2c>
	octaveIntTriggered = 1;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x3c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	e000      	b.n	80009f6 <HAL_GPIO_EXTI_Callback+0x2e>
    __NOP();
 80009f4:	bf00      	nop
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40020000 	.word	0x40020000
 8000a04:	200000c0 	.word	0x200000c0

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f000 fa80 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_I2C_MspInit+0x94>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d134      	bne.n	8000af0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <HAL_I2C_MspInit+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <HAL_I2C_MspInit+0x98>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_I2C_MspInit+0x98>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa8:	2312      	movs	r3, #18
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4810      	ldr	r0, [pc, #64]	; (8000b00 <HAL_I2C_MspInit+0x9c>)
 8000ac0:	f000 fabc 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_I2C_MspInit+0x98>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_I2C_MspInit+0x98>)
 8000ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_I2C_MspInit+0x98>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	201f      	movs	r0, #31
 8000ae6:	f000 fa42 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000aea:	201f      	movs	r0, #31
 8000aec:	f000 fa5b 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_UART_MspInit+0x8c>)
 8000b7a:	f000 fa5f 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 f8a6 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <I2C1_EV_IRQHandler+0x10>)
 8000bee:	f001 f869 	bl	8001cc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000028 	.word	0x20000028

08000bfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c04:	f000 fbe2 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c0c:	f000 fbde 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f003 fff7 	bl	8004c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fd2b 	bl	80006c4 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c7c:	08004cf0 	.word	0x08004cf0
  ldr r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c84:	200000c8 	.word	0x200000c8

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f94f 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fea8 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f967 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 f92f 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200000c4 	.word	0x200000c4

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200000c4 	.word	0x200000c4

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d004      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e00c      	b.n	8001012 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0201 	bic.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800102c:	b2db      	uxtb	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e165      	b.n	8001324 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8154 	bne.w	800131e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80ae 	beq.w	800131e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_GPIO_Init+0x300>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5c      	ldr	r2, [pc, #368]	; (800133c <HAL_GPIO_Init+0x300>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <HAL_GPIO_Init+0x300>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_GPIO_Init+0x304>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x308>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	; (8001348 <HAL_GPIO_Init+0x30c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	; (800134c <HAL_GPIO_Init+0x310>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_GPIO_Init+0x314>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_GPIO_Init+0x318>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x20a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4a      	ldr	r2, [pc, #296]	; (8001358 <HAL_GPIO_Init+0x31c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x206>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_GPIO_Init+0x320>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x202>
 800123a:	2306      	movs	r3, #6
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800123e:	2307      	movs	r3, #7
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x304>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_GPIO_Init+0x324>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_GPIO_Init+0x324>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_GPIO_Init+0x324>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae96 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a8:	887a      	ldrh	r2, [r7, #2]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	041a      	lsls	r2, r3, #16
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	400b      	ands	r3, r1
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff faec 	bl	80009c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e12b      	b.n	8001666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fb1e 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	; 0x24
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800144e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800145e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001460:	f002 fc42 	bl	8003ce8 <HAL_RCC_GetPCLK1Freq>
 8001464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a81      	ldr	r2, [pc, #516]	; (8001670 <HAL_I2C_Init+0x274>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d807      	bhi.n	8001480 <HAL_I2C_Init+0x84>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a80      	ldr	r2, [pc, #512]	; (8001674 <HAL_I2C_Init+0x278>)
 8001474:	4293      	cmp	r3, r2
 8001476:	bf94      	ite	ls
 8001478:	2301      	movls	r3, #1
 800147a:	2300      	movhi	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	e006      	b.n	800148e <HAL_I2C_Init+0x92>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a7d      	ldr	r2, [pc, #500]	; (8001678 <HAL_I2C_Init+0x27c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0e7      	b.n	8001666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4a78      	ldr	r2, [pc, #480]	; (800167c <HAL_I2C_Init+0x280>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a6a      	ldr	r2, [pc, #424]	; (8001670 <HAL_I2C_Init+0x274>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d802      	bhi.n	80014d0 <HAL_I2C_Init+0xd4>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3301      	adds	r3, #1
 80014ce:	e009      	b.n	80014e4 <HAL_I2C_Init+0xe8>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	4a69      	ldr	r2, [pc, #420]	; (8001680 <HAL_I2C_Init+0x284>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	3301      	adds	r3, #1
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	495c      	ldr	r1, [pc, #368]	; (8001670 <HAL_I2C_Init+0x274>)
 8001500:	428b      	cmp	r3, r1
 8001502:	d819      	bhi.n	8001538 <HAL_I2C_Init+0x13c>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e59      	subs	r1, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001512:	1c59      	adds	r1, r3, #1
 8001514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001518:	400b      	ands	r3, r1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00a      	beq.n	8001534 <HAL_I2C_Init+0x138>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1e59      	subs	r1, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fbb1 f3f3 	udiv	r3, r1, r3
 800152c:	3301      	adds	r3, #1
 800152e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001532:	e051      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 8001534:	2304      	movs	r3, #4
 8001536:	e04f      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d111      	bne.n	8001564 <HAL_I2C_Init+0x168>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e58      	subs	r0, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	440b      	add	r3, r1
 800154e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	e012      	b.n	800158a <HAL_I2C_Init+0x18e>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	0099      	lsls	r1, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_I2C_Init+0x196>
 800158e:	2301      	movs	r3, #1
 8001590:	e022      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10e      	bne.n	80015b8 <HAL_I2C_Init+0x1bc>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1e58      	subs	r0, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	440b      	add	r3, r1
 80015a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ac:	3301      	adds	r3, #1
 80015ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b6:	e00f      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	0099      	lsls	r1, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	6809      	ldr	r1, [r1, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6911      	ldr	r1, [r2, #16]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68d2      	ldr	r2, [r2, #12]
 8001612:	4311      	orrs	r1, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	430b      	orrs	r3, r1
 800161a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	000186a0 	.word	0x000186a0
 8001674:	001e847f 	.word	0x001e847f
 8001678:	003d08ff 	.word	0x003d08ff
 800167c:	431bde83 	.word	0x431bde83
 8001680:	10624dd3 	.word	0x10624dd3

08001684 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af02      	add	r7, sp, #8
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	817b      	strh	r3, [r7, #10]
 8001696:	460b      	mov	r3, r1
 8001698:	813b      	strh	r3, [r7, #8]
 800169a:	4613      	mov	r3, r2
 800169c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800169e:	f7ff fb5b 	bl	8000d58 <HAL_GetTick>
 80016a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	f040 80d9 	bne.w	8001864 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2319      	movs	r3, #25
 80016b8:	2201      	movs	r2, #1
 80016ba:	496d      	ldr	r1, [pc, #436]	; (8001870 <HAL_I2C_Mem_Write+0x1ec>)
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f001 fff7 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016c8:	2302      	movs	r3, #2
 80016ca:	e0cc      	b.n	8001866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_I2C_Mem_Write+0x56>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e0c5      	b.n	8001866 <HAL_I2C_Mem_Write+0x1e2>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d007      	beq.n	8001700 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2221      	movs	r2, #33	; 0x21
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_I2C_Mem_Write+0x1f0>)
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001742:	88f8      	ldrh	r0, [r7, #6]
 8001744:	893a      	ldrh	r2, [r7, #8]
 8001746:	8979      	ldrh	r1, [r7, #10]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4603      	mov	r3, r0
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f001 fd86 	bl	8003264 <I2C_RequestMemoryWrite>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d052      	beq.n	8001804 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e081      	b.n	8001866 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f002 f878 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00d      	beq.n	800178e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b04      	cmp	r3, #4
 8001778:	d107      	bne.n	800178a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001788:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06b      	b.n	8001866 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d11b      	bne.n	8001804 <HAL_I2C_Mem_Write+0x180>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d017      	beq.n	8001804 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1aa      	bne.n	8001762 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f002 f864 	bl	80038de <I2C_WaitOnBTFFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2b04      	cmp	r3, #4
 8001822:	d107      	bne.n	8001834 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001832:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e016      	b.n	8001866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2220      	movs	r2, #32
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001864:	2302      	movs	r3, #2
  }
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	00100002 	.word	0x00100002
 8001874:	ffff0000 	.word	0xffff0000

08001878 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	4608      	mov	r0, r1
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4603      	mov	r3, r0
 8001888:	817b      	strh	r3, [r7, #10]
 800188a:	460b      	mov	r3, r1
 800188c:	813b      	strh	r3, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001892:	f7ff fa61 	bl	8000d58 <HAL_GetTick>
 8001896:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	f040 8208 	bne.w	8001cb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2319      	movs	r3, #25
 80018ac:	2201      	movs	r2, #1
 80018ae:	497b      	ldr	r1, [pc, #492]	; (8001a9c <HAL_I2C_Mem_Read+0x224>)
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f001 fefd 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018bc:	2302      	movs	r3, #2
 80018be:	e1fb      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_I2C_Mem_Read+0x56>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e1f4      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d007      	beq.n	80018f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2222      	movs	r2, #34	; 0x22
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4a5b      	ldr	r2, [pc, #364]	; (8001aa0 <HAL_I2C_Mem_Read+0x228>)
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001936:	88f8      	ldrh	r0, [r7, #6]
 8001938:	893a      	ldrh	r2, [r7, #8]
 800193a:	8979      	ldrh	r1, [r7, #10]
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	4603      	mov	r3, r0
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f001 fd22 	bl	8003390 <I2C_RequestMemoryRead>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e1b0      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	2b00      	cmp	r3, #0
 800195c:	d113      	bne.n	8001986 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	623b      	str	r3, [r7, #32]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e184      	b.n	8001c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	2b01      	cmp	r3, #1
 800198c:	d11b      	bne.n	80019c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e164      	b.n	8001c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d11b      	bne.n	8001a06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	e144      	b.n	8001c90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a1c:	e138      	b.n	8001c90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	f200 80f1 	bhi.w	8001c0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d123      	bne.n	8001a78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f001 ffc5 	bl	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e139      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a76:	e10b      	b.n	8001c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d14e      	bne.n	8001b1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a86:	2200      	movs	r2, #0
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <HAL_I2C_Mem_Read+0x22c>)
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f001 fe10 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e10e      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
 8001a9a:	bf00      	nop
 8001a9c:	00100002 	.word	0x00100002
 8001aa0:	ffff0000 	.word	0xffff0000
 8001aa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b1c:	e0b8      	b.n	8001c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b24:	2200      	movs	r2, #0
 8001b26:	4966      	ldr	r1, [pc, #408]	; (8001cc0 <HAL_I2C_Mem_Read+0x448>)
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f001 fdc1 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0bf      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b80:	2200      	movs	r2, #0
 8001b82:	494f      	ldr	r1, [pc, #316]	; (8001cc0 <HAL_I2C_Mem_Read+0x448>)
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f001 fd93 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e091      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c08:	e042      	b.n	8001c90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f001 fed8 	bl	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e04c      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d118      	bne.n	8001c90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f aec2 	bne.w	8001a1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001cb6:	2302      	movs	r3, #2
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	00010004 	.word	0x00010004

08001cc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d003      	beq.n	8001cfc <HAL_I2C_EV_IRQHandler+0x38>
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b40      	cmp	r3, #64	; 0x40
 8001cf8:	f040 80c1 	bne.w	8001e7e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10d      	bne.n	8001d32 <HAL_I2C_EV_IRQHandler+0x6e>
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d1c:	d003      	beq.n	8001d26 <HAL_I2C_EV_IRQHandler+0x62>
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_EV_IRQHandler+0x66>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_I2C_EV_IRQHandler+0x68>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	f000 8132 	beq.w	8001f96 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_I2C_EV_IRQHandler+0x92>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	0a5b      	lsrs	r3, r3, #9
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f001 fec0 	bl	8003ace <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fcdc 	bl	800270c <I2C_Master_SB>
 8001d54:	e092      	b.n	8001e7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_I2C_EV_IRQHandler+0xb2>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	0a5b      	lsrs	r3, r3, #9
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fd52 	bl	8002818 <I2C_Master_ADD10>
 8001d74:	e082      	b.n	8001e7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_I2C_EV_IRQHandler+0xd2>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	0a5b      	lsrs	r3, r3, #9
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fd6c 	bl	800286c <I2C_Master_ADDR>
 8001d94:	e072      	b.n	8001e7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03b      	beq.n	8001e1a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001db0:	f000 80f3 	beq.w	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	09db      	lsrs	r3, r3, #7
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00f      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f94c 	bl	8002076 <I2C_MasterTransmit_TXE>
 8001dde:	e04d      	b.n	8001e7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80d6 	beq.w	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	0a5b      	lsrs	r3, r3, #9
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80cf 	beq.w	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	2b21      	cmp	r3, #33	; 0x21
 8001e00:	d103      	bne.n	8001e0a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9d3 	bl	80021ae <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e08:	e0c7      	b.n	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	f040 80c4 	bne.w	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fa41 	bl	800229a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e18:	e0bf      	b.n	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e28:	f000 80b7 	beq.w	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00f      	beq.n	8001e58 <HAL_I2C_EV_IRQHandler+0x194>
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <HAL_I2C_EV_IRQHandler+0x194>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fab6 	bl	80023c2 <I2C_MasterReceive_RXNE>
 8001e56:	e011      	b.n	8001e7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 809a 	beq.w	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	0a5b      	lsrs	r3, r3, #9
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8093 	beq.w	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fb5f 	bl	8002538 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7a:	e08e      	b.n	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e7c:	e08d      	b.n	8001f9a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e007      	b.n	8001ea0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d012      	beq.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x20e>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	0a5b      	lsrs	r3, r3, #9
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ec8:	69b9      	ldr	r1, [r7, #24]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 ff1d 	bl	8002d0a <I2C_Slave_ADDR>
 8001ed0:	e066      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x22e>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	0a5b      	lsrs	r3, r3, #9
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 ff58 	bl	8002da0 <I2C_Slave_STOPF>
 8001ef0:	e056      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	2b21      	cmp	r3, #33	; 0x21
 8001ef6:	d002      	beq.n	8001efe <HAL_I2C_EV_IRQHandler+0x23a>
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b29      	cmp	r3, #41	; 0x29
 8001efc:	d125      	bne.n	8001f4a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	09db      	lsrs	r3, r3, #7
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00f      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x266>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	0a9b      	lsrs	r3, r3, #10
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x266>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fe33 	bl	8002b8e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f28:	e039      	b.n	8001f9e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d033      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0x2da>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	0a5b      	lsrs	r3, r3, #9
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d02d      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fe60 	bl	8002c08 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f48:	e029      	b.n	8001f9e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00f      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	0a9b      	lsrs	r3, r3, #10
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fe6b 	bl	8002c4a <I2C_SlaveReceive_RXNE>
 8001f74:	e014      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00e      	beq.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	0a5b      	lsrs	r3, r3, #9
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fe99 	bl	8002cc6 <I2C_SlaveReceive_BTF>
 8001f94:	e004      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f96:	bf00      	nop
 8001f98:	e002      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9a:	bf00      	nop
 8001f9c:	e000      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	70fb      	strb	r3, [r7, #3]
 8002002:	4613      	mov	r3, r2
 8002004:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800208c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	d150      	bne.n	800213e <I2C_MasterTransmit_TXE+0xc8>
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b21      	cmp	r3, #33	; 0x21
 80020a0:	d14d      	bne.n	800213e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d01d      	beq.n	80020e4 <I2C_MasterTransmit_TXE+0x6e>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d01a      	beq.n	80020e4 <I2C_MasterTransmit_TXE+0x6e>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020b4:	d016      	beq.n	80020e4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020c4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2211      	movs	r2, #17
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff62 	bl	8001fa6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020e2:	e060      	b.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020f2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002102:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d107      	bne.n	800212e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff7d 	bl	8002026 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800212c:	e03b      	b.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ff35 	bl	8001fa6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800213c:	e033      	b.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b21      	cmp	r3, #33	; 0x21
 8002142:	d005      	beq.n	8002150 <I2C_MasterTransmit_TXE+0xda>
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d12d      	bne.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b22      	cmp	r3, #34	; 0x22
 800214e:	d12a      	bne.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002168:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800216a:	e01c      	b.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d103      	bne.n	8002180 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f88e 	bl	800229a <I2C_MemoryTransmit_TXE_BTF>
}
 800217e:	e012      	b.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021a4:	e7ff      	b.n	80021a6 <I2C_MasterTransmit_TXE+0x130>
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b21      	cmp	r3, #33	; 0x21
 80021c6:	d164      	bne.n	8002292 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021f6:	e04c      	b.n	8002292 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d01d      	beq.n	800223a <I2C_MasterTransmit_BTF+0x8c>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b20      	cmp	r3, #32
 8002202:	d01a      	beq.n	800223a <I2C_MasterTransmit_BTF+0x8c>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800220a:	d016      	beq.n	800223a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800221a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2211      	movs	r2, #17
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff feb7 	bl	8001fa6 <HAL_I2C_MasterTxCpltCallback>
}
 8002238:	e02b      	b.n	8002292 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002248:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002258:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b40      	cmp	r3, #64	; 0x40
 8002272:	d107      	bne.n	8002284 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fed2 	bl	8002026 <HAL_I2C_MemTxCpltCallback>
}
 8002282:	e006      	b.n	8002292 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fe8a 	bl	8001fa6 <HAL_I2C_MasterTxCpltCallback>
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11d      	bne.n	80022ee <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d10b      	bne.n	80022d2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ca:	1c9a      	adds	r2, r3, #2
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80022d0:	e073      	b.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	121b      	asrs	r3, r3, #8
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022ec:	e065      	b.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10b      	bne.n	800230e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800230c:	e055      	b.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	2b02      	cmp	r3, #2
 8002314:	d151      	bne.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2b22      	cmp	r3, #34	; 0x22
 800231a:	d10d      	bne.n	8002338 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002336:	e040      	b.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b21      	cmp	r3, #33	; 0x21
 8002346:	d112      	bne.n	800236e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800236c:	e025      	b.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d120      	bne.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b21      	cmp	r3, #33	; 0x21
 800237c:	d11d      	bne.n	80023ba <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800238c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fe36 	bl	8002026 <HAL_I2C_MemTxCpltCallback>
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b22      	cmp	r3, #34	; 0x22
 80023d4:	f040 80ac 	bne.w	8002530 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d921      	bls.n	800242a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b03      	cmp	r3, #3
 8002414:	f040 808c 	bne.w	8002530 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002428:	e082      	b.n	8002530 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	2b02      	cmp	r3, #2
 8002430:	d075      	beq.n	800251e <I2C_MasterReceive_RXNE+0x15c>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d002      	beq.n	800243e <I2C_MasterReceive_RXNE+0x7c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d16f      	bne.n	800251e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f001 fa8e 	bl	8003960 <I2C_WaitOnSTOPRequestThroughIT>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d142      	bne.n	80024d0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002458:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002468:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d10a      	bne.n	80024ba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fdc1 	bl	800203a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024b8:	e03a      	b.n	8002530 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2212      	movs	r2, #18
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fd76 	bl	8001fba <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024ce:	e02f      	b.n	8002530 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fd99 	bl	800204e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800251c:	e008      	b.n	8002530 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252c:	605a      	str	r2, [r3, #4]
}
 800252e:	e7ff      	b.n	8002530 <I2C_MasterReceive_RXNE+0x16e>
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b04      	cmp	r3, #4
 800254e:	d11b      	bne.n	8002588 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002586:	e0bd      	b.n	8002704 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b03      	cmp	r3, #3
 8002590:	d129      	bne.n	80025e6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d00a      	beq.n	80025be <I2C_MasterReceive_BTF+0x86>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d007      	beq.n	80025be <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025e4:	e08e      	b.n	8002704 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d176      	bne.n	80026de <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d002      	beq.n	80025fc <I2C_MasterReceive_BTF+0xc4>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d108      	bne.n	800260e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e019      	b.n	8002642 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d002      	beq.n	800261a <I2C_MasterReceive_BTF+0xe2>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d108      	bne.n	800262c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e00a      	b.n	8002642 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b10      	cmp	r3, #16
 8002630:	d007      	beq.n	8002642 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002640:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800269c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d10a      	bne.n	80026c8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fcba 	bl	800203a <HAL_I2C_MemRxCpltCallback>
}
 80026c6:	e01d      	b.n	8002704 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2212      	movs	r2, #18
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fc6f 	bl	8001fba <HAL_I2C_MasterRxCpltCallback>
}
 80026dc:	e012      	b.n	8002704 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d117      	bne.n	8002750 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002738:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800273a:	e067      	b.n	800280c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]
}
 800274e:	e05d      	b.n	800280c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002758:	d133      	bne.n	80027c2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b21      	cmp	r3, #33	; 0x21
 8002764:	d109      	bne.n	800277a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002776:	611a      	str	r2, [r3, #16]
 8002778:	e008      	b.n	800278c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <I2C_Master_SB+0x92>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d032      	beq.n	800280c <I2C_Master_SB+0x100>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02d      	beq.n	800280c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027be:	605a      	str	r2, [r3, #4]
}
 80027c0:	e024      	b.n	800280c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	11db      	asrs	r3, r3, #7
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f003 0306 	and.w	r3, r3, #6
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f063 030f 	orn	r3, r3, #15
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	611a      	str	r2, [r3, #16]
}
 80027e6:	e011      	b.n	800280c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10d      	bne.n	800280c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	11db      	asrs	r3, r3, #7
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f003 0306 	and.w	r3, r3, #6
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f063 030e 	orn	r3, r3, #14
 8002804:	b2da      	uxtb	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	b2da      	uxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <I2C_Master_ADD10+0x26>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <I2C_Master_ADD10+0x48>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800285e:	605a      	str	r2, [r3, #4]
  }
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b091      	sub	sp, #68	; 0x44
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800287a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b22      	cmp	r3, #34	; 0x22
 8002894:	f040 8169 	bne.w	8002b6a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <I2C_Master_ADDR+0x54>
 80028a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d10b      	bne.n	80028c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	e160      	b.n	8002b82 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11d      	bne.n	8002904 <I2C_Master_ADDR+0x98>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028d0:	d118      	bne.n	8002904 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	651a      	str	r2, [r3, #80]	; 0x50
 8002902:	e13e      	b.n	8002b82 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e115      	b.n	8002b62 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 808a 	bne.w	8002a56 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002948:	d137      	bne.n	80029ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002958:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002968:	d113      	bne.n	8002992 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002978:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	e0e7      	b.n	8002b62 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e0d3      	b.n	8002b62 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d02e      	beq.n	8002a1e <I2C_Master_ADDR+0x1b2>
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d02b      	beq.n	8002a1e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	2b12      	cmp	r3, #18
 80029ca:	d102      	bne.n	80029d2 <I2C_Master_ADDR+0x166>
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d125      	bne.n	8002a1e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d00e      	beq.n	80029f6 <I2C_Master_ADDR+0x18a>
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d00b      	beq.n	80029f6 <I2C_Master_ADDR+0x18a>
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d008      	beq.n	80029f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e007      	b.n	8002a06 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a04:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	e0a1      	b.n	8002b62 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e085      	b.n	8002b62 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d14d      	bne.n	8002afc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d016      	beq.n	8002a94 <I2C_Master_ADDR+0x228>
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d013      	beq.n	8002a94 <I2C_Master_ADDR+0x228>
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d010      	beq.n	8002a94 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a80:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e007      	b.n	8002aa4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aa2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab2:	d117      	bne.n	8002ae4 <I2C_Master_ADDR+0x278>
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aba:	d00b      	beq.n	8002ad4 <I2C_Master_ADDR+0x268>
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d008      	beq.n	8002ad4 <I2C_Master_ADDR+0x268>
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d005      	beq.n	8002ad4 <I2C_Master_ADDR+0x268>
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d002      	beq.n	8002ad4 <I2C_Master_ADDR+0x268>
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d107      	bne.n	8002ae4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ae2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e032      	b.n	8002b62 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b0a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1a:	d117      	bne.n	8002b4c <I2C_Master_ADDR+0x2e0>
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b22:	d00b      	beq.n	8002b3c <I2C_Master_ADDR+0x2d0>
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d008      	beq.n	8002b3c <I2C_Master_ADDR+0x2d0>
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d005      	beq.n	8002b3c <I2C_Master_ADDR+0x2d0>
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d002      	beq.n	8002b3c <I2C_Master_ADDR+0x2d0>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d107      	bne.n	8002b4c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b68:	e00b      	b.n	8002b82 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	e7ff      	b.n	8002b82 <I2C_Master_ADDR+0x316>
 8002b82:	bf00      	nop
 8002b84:	3744      	adds	r7, #68	; 0x44
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d02b      	beq.n	8002c00 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d114      	bne.n	8002c00 <I2C_SlaveTransmit_TXE+0x72>
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b29      	cmp	r3, #41	; 0x29
 8002bda:	d111      	bne.n	8002c00 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2221      	movs	r2, #33	; 0x21
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2228      	movs	r2, #40	; 0x28
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff f9e7 	bl	8001fce <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d011      	beq.n	8002c3e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02c      	beq.n	8002cbe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d114      	bne.n	8002cbe <I2C_SlaveReceive_RXNE+0x74>
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b2a      	cmp	r3, #42	; 0x2a
 8002c98:	d111      	bne.n	8002cbe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2222      	movs	r2, #34	; 0x22
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2228      	movs	r2, #40	; 0x28
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff f992 	bl	8001fe2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d24:	2b28      	cmp	r3, #40	; 0x28
 8002d26:	d127      	bne.n	8002d78 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d36:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	09db      	lsrs	r3, r3, #7
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	81bb      	strh	r3, [r7, #12]
 8002d5a:	e002      	b.n	8002d62 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d6a:	89ba      	ldrh	r2, [r7, #12]
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff f940 	bl	8001ff6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d76:	e00e      	b.n	8002d96 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d172      	bne.n	8002ee4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b22      	cmp	r3, #34	; 0x22
 8002e02:	d002      	beq.n	8002e0a <I2C_Slave_STOPF+0x6a>
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b2a      	cmp	r3, #42	; 0x2a
 8002e08:	d135      	bne.n	8002e76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe f8eb 	bl	800101e <HAL_DMA_GetState>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d049      	beq.n	8002ee2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4a69      	ldr	r2, [pc, #420]	; (8002ff8 <I2C_Slave_STOPF+0x258>)
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f8bd 	bl	8000fda <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03d      	beq.n	8002ee2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e70:	4610      	mov	r0, r2
 8002e72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e74:	e035      	b.n	8002ee2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f8b5 	bl	800101e <HAL_DMA_GetState>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d014      	beq.n	8002ee4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	4a4e      	ldr	r2, [pc, #312]	; (8002ff8 <I2C_Slave_STOPF+0x258>)
 8002ec0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f887 	bl	8000fda <HAL_DMA_Abort_IT>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002edc:	4610      	mov	r0, r2
 8002ede:	4798      	blx	r3
 8002ee0:	e000      	b.n	8002ee4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ee2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03e      	beq.n	8002f6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d112      	bne.n	8002f22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d112      	bne.n	8002f56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f043 0204 	orr.w	r2, r3, #4
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f843 	bl	8003000 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f7a:	e039      	b.n	8002ff0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f80:	d109      	bne.n	8002f96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2228      	movs	r2, #40	; 0x28
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff f826 	bl	8001fe2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b28      	cmp	r3, #40	; 0x28
 8002fa0:	d111      	bne.n	8002fc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <I2C_Slave_STOPF+0x25c>)
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff f827 	bl	8002012 <HAL_I2C_ListenCpltCallback>
}
 8002fc4:	e014      	b.n	8002ff0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	2b22      	cmp	r3, #34	; 0x22
 8002fcc:	d002      	beq.n	8002fd4 <I2C_Slave_STOPF+0x234>
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b22      	cmp	r3, #34	; 0x22
 8002fd2:	d10d      	bne.n	8002ff0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe fff9 	bl	8001fe2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	08003561 	.word	0x08003561
 8002ffc:	ffff0000 	.word	0xffff0000

08003000 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003016:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003018:	7bbb      	ldrb	r3, [r7, #14]
 800301a:	2b10      	cmp	r3, #16
 800301c:	d002      	beq.n	8003024 <I2C_ITError+0x24>
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d10a      	bne.n	800303a <I2C_ITError+0x3a>
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b22      	cmp	r3, #34	; 0x22
 8003028:	d107      	bne.n	800303a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003038:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003040:	2b28      	cmp	r3, #40	; 0x28
 8003042:	d107      	bne.n	8003054 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2228      	movs	r2, #40	; 0x28
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003052:	e015      	b.n	8003080 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003062:	d00a      	beq.n	800307a <I2C_ITError+0x7a>
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b60      	cmp	r3, #96	; 0x60
 8003068:	d007      	beq.n	800307a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308e:	d162      	bne.n	8003156 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d020      	beq.n	80030f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	4a6a      	ldr	r2, [pc, #424]	; (800325c <I2C_ITError+0x25c>)
 80030b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd ff8d 	bl	8000fda <HAL_DMA_Abort_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8089 	beq.w	80031da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030ea:	4610      	mov	r0, r2
 80030ec:	4798      	blx	r3
 80030ee:	e074      	b.n	80031da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	4a59      	ldr	r2, [pc, #356]	; (800325c <I2C_ITError+0x25c>)
 80030f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd ff6c 	bl	8000fda <HAL_DMA_Abort_IT>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d068      	beq.n	80031da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d10b      	bne.n	800312e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003150:	4610      	mov	r0, r2
 8003152:	4798      	blx	r3
 8003154:	e041      	b.n	80031da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b60      	cmp	r3, #96	; 0x60
 8003160:	d125      	bne.n	80031ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d10b      	bne.n	8003196 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe ff5b 	bl	8002062 <HAL_I2C_AbortCpltCallback>
 80031ac:	e015      	b.n	80031da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d10b      	bne.n	80031d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fe ff3a 	bl	800204e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10e      	bne.n	8003208 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003216:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d113      	bne.n	8003254 <I2C_ITError+0x254>
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b28      	cmp	r3, #40	; 0x28
 8003230:	d110      	bne.n	8003254 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <I2C_ITError+0x260>)
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe fedf 	bl	8002012 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	08003561 	.word	0x08003561
 8003260:	ffff0000 	.word	0xffff0000

08003264 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	460b      	mov	r3, r1
 8003278:	813b      	strh	r3, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	2200      	movs	r2, #0
 8003296:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fa08 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b4:	d103      	bne.n	80032be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e05f      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	492d      	ldr	r1, [pc, #180]	; (800338c <I2C_RequestMemoryWrite+0x128>)
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fa40 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e04c      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 faaa 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e02b      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]
 800333a:	e021      	b.n	8003380 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	b29b      	uxth	r3, r3
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fa84 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e005      	b.n	8003382 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003376:	893b      	ldrh	r3, [r7, #8]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f96a 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f0:	d103      	bne.n	80033fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0aa      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800340c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	4952      	ldr	r1, [pc, #328]	; (800355c <I2C_RequestMemoryRead+0x1cc>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f9a2 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e097      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa0c 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e076      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346c:	893b      	ldrh	r3, [r7, #8]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]
 8003476:	e021      	b.n	80034bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	b29b      	uxth	r3, r3
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	6a39      	ldr	r1, [r7, #32]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f9e6 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b04      	cmp	r3, #4
 800349c:	d107      	bne.n	80034ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e050      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	6a39      	ldr	r1, [r7, #32]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f9cb 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d107      	bne.n	80034e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e035      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	2200      	movs	r2, #0
 8003500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f8d3 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d103      	bne.n	8003528 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e013      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800352c:	897b      	ldrh	r3, [r7, #10]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	4906      	ldr	r1, [pc, #24]	; (800355c <I2C_RequestMemoryRead+0x1cc>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f90b 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00010002 	.word	0x00010002

08003560 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800357a:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <I2C_DMAAbort+0x148>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	08db      	lsrs	r3, r3, #3
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <I2C_DMAAbort+0x14c>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0a1a      	lsrs	r2, r3, #8
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00da      	lsls	r2, r3, #3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80035a6:	e00a      	b.n	80035be <I2C_DMAAbort+0x5e>
    }
    count--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d0ea      	beq.n	8003594 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	2200      	movs	r2, #0
 80035cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	2200      	movs	r2, #0
 80035dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	2200      	movs	r2, #0
 8003602:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	2200      	movs	r2, #0
 8003612:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b60      	cmp	r3, #96	; 0x60
 800362e:	d10e      	bne.n	800364e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7fe fd0b 	bl	8002062 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800364c:	e027      	b.n	800369e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003654:	2b28      	cmp	r3, #40	; 0x28
 8003656:	d117      	bne.n	8003688 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003676:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2228      	movs	r2, #40	; 0x28
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003686:	e007      	b.n	8003698 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f7fe fcd8 	bl	800204e <HAL_I2C_ErrorCallback>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000000 	.word	0x20000000
 80036ac:	14f8b589 	.word	0x14f8b589

080036b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c0:	e025      	b.n	800370e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c8:	d021      	beq.n	800370e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fd fb45 	bl	8000d58 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d116      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e023      	b.n	8003756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10d      	bne.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	43da      	mvns	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	e00c      	b.n	800374e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	429a      	cmp	r2, r3
 8003752:	d0b6      	beq.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800376c:	e051      	b.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d123      	bne.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0204 	orr.w	r2, r3, #4
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e046      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037cc:	d021      	beq.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fd fac3 	bl	8000d58 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e020      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10c      	bne.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e00b      	b.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	43da      	mvns	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d18d      	bne.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003868:	e02d      	b.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f900 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02d      	b.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003880:	d021      	beq.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fd fa69 	bl	8000d58 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d116      	bne.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d1ca      	bne.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ea:	e02d      	b.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f8bf 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e02d      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003902:	d021      	beq.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003904:	f7fd fa28 	bl	8000d58 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	d302      	bcc.n	800391a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d116      	bne.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e007      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d1ca      	bne.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	0a1a      	lsrs	r2, r3, #8
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3b01      	subs	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e008      	b.n	80039b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ac:	d0e9      	beq.n	8003982 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20000000 	.word	0x20000000
 80039c0:	14f8b589 	.word	0x14f8b589

080039c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039d0:	e042      	b.n	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d119      	bne.n	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0210 	mvn.w	r2, #16
 80039e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e029      	b.n	8003a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fd f9a0 	bl	8000d58 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d1b5      	bne.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d11b      	bne.n	8003ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ade:	d103      	bne.n	8003ae8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ae6:	e007      	b.n	8003af8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003af0:	d102      	bne.n	8003af8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2208      	movs	r2, #8
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0cc      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d90c      	bls.n	8003b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0b8      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d020      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b58:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4a58      	ldr	r2, [pc, #352]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b7c:	4b50      	ldr	r3, [pc, #320]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	494d      	ldr	r1, [pc, #308]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d044      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d119      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e07f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e06f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e067      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4934      	ldr	r1, [pc, #208]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd f8b0 	bl	8000d58 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fd f8ac 	bl	8000d58 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e04f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d20c      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e032      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4916      	ldr	r1, [pc, #88]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	490e      	ldr	r1, [pc, #56]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c8a:	f000 f855 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	490a      	ldr	r1, [pc, #40]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	5ccb      	ldrb	r3, [r1, r3]
 8003c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd f810 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023c00 	.word	0x40023c00
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	08004cc8 	.word	0x08004cc8
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	20000004 	.word	0x20000004

08003cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000000 	.word	0x20000000

08003ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cec:	f7ff fff0 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0a9b      	lsrs	r3, r3, #10
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4903      	ldr	r1, [pc, #12]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	08004cd8 	.word	0x08004cd8

08003d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d14:	f7ff ffdc 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0b5b      	lsrs	r3, r3, #13
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	08004cd8 	.word	0x08004cd8

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b0ae      	sub	sp, #184	; 0xb8
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5e:	4bcb      	ldr	r3, [pc, #812]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	f200 8206 	bhi.w	8004178 <HAL_RCC_GetSysClockFreq+0x440>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08004179 	.word	0x08004179
 8003d7c:	08004179 	.word	0x08004179
 8003d80:	08004179 	.word	0x08004179
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08004179 	.word	0x08004179
 8003d8c:	08004179 	.word	0x08004179
 8003d90:	08004179 	.word	0x08004179
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08004179 	.word	0x08004179
 8003d9c:	08004179 	.word	0x08004179
 8003da0:	08004179 	.word	0x08004179
 8003da4:	08003fa9 	.word	0x08003fa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4bb9      	ldr	r3, [pc, #740]	; (8004090 <HAL_RCC_GetSysClockFreq+0x358>)
 8003daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003dae:	e1e7      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db0:	4bb8      	ldr	r3, [pc, #736]	; (8004094 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003db6:	e1e3      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db8:	4bb4      	ldr	r3, [pc, #720]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dc4:	4bb1      	ldr	r3, [pc, #708]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d071      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4bae      	ldr	r3, [pc, #696]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ddc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003df6:	4622      	mov	r2, r4
 8003df8:	462b      	mov	r3, r5
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	0159      	lsls	r1, r3, #5
 8003e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e08:	0150      	lsls	r0, r2, #5
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4621      	mov	r1, r4
 8003e10:	1a51      	subs	r1, r2, r1
 8003e12:	6439      	str	r1, [r7, #64]	; 0x40
 8003e14:	4629      	mov	r1, r5
 8003e16:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e28:	4649      	mov	r1, r9
 8003e2a:	018b      	lsls	r3, r1, #6
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e32:	4641      	mov	r1, r8
 8003e34:	018a      	lsls	r2, r1, #6
 8003e36:	4641      	mov	r1, r8
 8003e38:	1a51      	subs	r1, r2, r1
 8003e3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e50:	4649      	mov	r1, r9
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4641      	mov	r1, r8
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4622      	mov	r2, r4
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e80:	4629      	mov	r1, r5
 8003e82:	024b      	lsls	r3, r1, #9
 8003e84:	4621      	mov	r1, r4
 8003e86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	024a      	lsls	r2, r1, #9
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ea0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ea4:	f7fc f9ae 	bl	8000204 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb2:	e067      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb4:	4b75      	ldr	r3, [pc, #468]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ece:	2300      	movs	r3, #0
 8003ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ed2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
 8003eda:	f04f 0000 	mov.w	r0, #0
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee8:	0150      	lsls	r0, r2, #5
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4621      	mov	r1, r4
 8003ef0:	1a51      	subs	r1, r2, r1
 8003ef2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f08:	4649      	mov	r1, r9
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f12:	4641      	mov	r1, r8
 8003f14:	018a      	lsls	r2, r1, #6
 8003f16:	4641      	mov	r1, r8
 8003f18:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f36:	4692      	mov	sl, r2
 8003f38:	469b      	mov	fp, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	eb1a 0303 	adds.w	r3, sl, r3
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	462b      	mov	r3, r5
 8003f44:	eb4b 0303 	adc.w	r3, fp, r3
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f56:	4629      	mov	r1, r5
 8003f58:	028b      	lsls	r3, r1, #10
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f60:	4621      	mov	r1, r4
 8003f62:	028a      	lsls	r2, r1, #10
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f70:	677a      	str	r2, [r7, #116]	; 0x74
 8003f72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f76:	f7fc f945 	bl	8000204 <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4613      	mov	r3, r2
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fa6:	e0eb      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d06b      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fdc:	4622      	mov	r2, r4
 8003fde:	462b      	mov	r3, r5
 8003fe0:	f04f 0000 	mov.w	r0, #0
 8003fe4:	f04f 0100 	mov.w	r1, #0
 8003fe8:	0159      	lsls	r1, r3, #5
 8003fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fee:	0150      	lsls	r0, r2, #5
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	1a51      	subs	r1, r2, r1
 8003ff8:	61b9      	str	r1, [r7, #24]
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800400e:	4659      	mov	r1, fp
 8004010:	018b      	lsls	r3, r1, #6
 8004012:	4651      	mov	r1, sl
 8004014:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004018:	4651      	mov	r1, sl
 800401a:	018a      	lsls	r2, r1, #6
 800401c:	4651      	mov	r1, sl
 800401e:	ebb2 0801 	subs.w	r8, r2, r1
 8004022:	4659      	mov	r1, fp
 8004024:	eb63 0901 	sbc.w	r9, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004034:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004038:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800403c:	4690      	mov	r8, r2
 800403e:	4699      	mov	r9, r3
 8004040:	4623      	mov	r3, r4
 8004042:	eb18 0303 	adds.w	r3, r8, r3
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	462b      	mov	r3, r5
 800404a:	eb49 0303 	adc.w	r3, r9, r3
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800405c:	4629      	mov	r1, r5
 800405e:	024b      	lsls	r3, r1, #9
 8004060:	4621      	mov	r1, r4
 8004062:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004066:	4621      	mov	r1, r4
 8004068:	024a      	lsls	r2, r1, #9
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004072:	2200      	movs	r2, #0
 8004074:	65bb      	str	r3, [r7, #88]	; 0x58
 8004076:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004078:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800407c:	f7fc f8c2 	bl	8000204 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4613      	mov	r3, r2
 8004086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800408a:	e065      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x420>
 800408c:	40023800 	.word	0x40023800
 8004090:	00f42400 	.word	0x00f42400
 8004094:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004098:	4b3d      	ldr	r3, [pc, #244]	; (8004190 <HAL_RCC_GetSysClockFreq+0x458>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	2200      	movs	r2, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	4611      	mov	r1, r2
 80040a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
 80040aa:	2300      	movs	r3, #0
 80040ac:	657b      	str	r3, [r7, #84]	; 0x54
 80040ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80040b2:	4642      	mov	r2, r8
 80040b4:	464b      	mov	r3, r9
 80040b6:	f04f 0000 	mov.w	r0, #0
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	0159      	lsls	r1, r3, #5
 80040c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c4:	0150      	lsls	r0, r2, #5
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4641      	mov	r1, r8
 80040cc:	1a51      	subs	r1, r2, r1
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	4649      	mov	r1, r9
 80040d2:	eb63 0301 	sbc.w	r3, r3, r1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040e4:	4659      	mov	r1, fp
 80040e6:	018b      	lsls	r3, r1, #6
 80040e8:	4651      	mov	r1, sl
 80040ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ee:	4651      	mov	r1, sl
 80040f0:	018a      	lsls	r2, r1, #6
 80040f2:	4651      	mov	r1, sl
 80040f4:	1a54      	subs	r4, r2, r1
 80040f6:	4659      	mov	r1, fp
 80040f8:	eb63 0501 	sbc.w	r5, r3, r1
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	00eb      	lsls	r3, r5, #3
 8004106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410a:	00e2      	lsls	r2, r4, #3
 800410c:	4614      	mov	r4, r2
 800410e:	461d      	mov	r5, r3
 8004110:	4643      	mov	r3, r8
 8004112:	18e3      	adds	r3, r4, r3
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	464b      	mov	r3, r9
 8004118:	eb45 0303 	adc.w	r3, r5, r3
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412a:	4629      	mov	r1, r5
 800412c:	028b      	lsls	r3, r1, #10
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004134:	4621      	mov	r1, r4
 8004136:	028a      	lsls	r2, r1, #10
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004140:	2200      	movs	r2, #0
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
 8004144:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004146:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800414a:	f7fc f85b 	bl	8000204 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4613      	mov	r3, r2
 8004154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_RCC_GetSysClockFreq+0x458>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0f1b      	lsrs	r3, r3, #28
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800416a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004176:	e003      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_GetSysClockFreq+0x45c>)
 800417a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800417e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004184:	4618      	mov	r0, r3
 8004186:	37b8      	adds	r7, #184	; 0xb8
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	00f42400 	.word	0x00f42400

08004198 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e28d      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8083 	beq.w	80042be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041b8:	4b94      	ldr	r3, [pc, #592]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d019      	beq.n	80041f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041c4:	4b91      	ldr	r3, [pc, #580]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041d0:	4b8e      	ldr	r3, [pc, #568]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041dc:	d00c      	beq.n	80041f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b8b      	ldr	r3, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d112      	bne.n	8004210 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ea:	4b88      	ldr	r3, [pc, #544]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f6:	d10b      	bne.n	8004210 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	4b84      	ldr	r3, [pc, #528]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05b      	beq.n	80042bc <HAL_RCC_OscConfig+0x124>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d157      	bne.n	80042bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e25a      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d106      	bne.n	8004228 <HAL_RCC_OscConfig+0x90>
 800421a:	4b7c      	ldr	r3, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7b      	ldr	r2, [pc, #492]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xcc>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0xb4>
 8004232:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a75      	ldr	r2, [pc, #468]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a72      	ldr	r2, [pc, #456]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xcc>
 800424c:	4b6f      	ldr	r3, [pc, #444]	; (800440c <HAL_RCC_OscConfig+0x274>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6e      	ldr	r2, [pc, #440]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b6c      	ldr	r3, [pc, #432]	; (800440c <HAL_RCC_OscConfig+0x274>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6b      	ldr	r2, [pc, #428]	; (800440c <HAL_RCC_OscConfig+0x274>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fc fd74 	bl	8000d58 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004274:	f7fc fd70 	bl	8000d58 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e21f      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xdc>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fc fd60 	bl	8000d58 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429c:	f7fc fd5c 	bl	8000d58 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e20b      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	4b57      	ldr	r3, [pc, #348]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x104>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d06f      	beq.n	80043aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042ca:	4b50      	ldr	r3, [pc, #320]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042d6:	4b4d      	ldr	r3, [pc, #308]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d105      	bne.n	80042ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042e2:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b44      	ldr	r3, [pc, #272]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x186>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1d3      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4937      	ldr	r1, [pc, #220]	; (800440c <HAL_RCC_OscConfig+0x274>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCC_OscConfig+0x278>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fc fd09 	bl	8000d58 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434a:	f7fc fd05 	bl	8000d58 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1b4      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x274>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b28      	ldr	r3, [pc, #160]	; (800440c <HAL_RCC_OscConfig+0x274>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4925      	ldr	r1, [pc, #148]	; (800440c <HAL_RCC_OscConfig+0x274>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_OscConfig+0x278>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fc fce8 	bl	8000d58 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438c:	f7fc fce4 	bl	8000d58 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e193      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d036      	beq.n	8004424 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fc fcc8 	bl	8000d58 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fc fcc4 	bl	8000d58 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e173      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x234>
 80043ea:	e01b      	b.n	8004424 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fc fcb1 	bl	8000d58 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	e00e      	b.n	8004418 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fc fcad 	bl	8000d58 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d907      	bls.n	8004418 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e15c      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
 800440c:	40023800 	.word	0x40023800
 8004410:	42470000 	.word	0x42470000
 8004414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b8a      	ldr	r3, [pc, #552]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ea      	bne.n	80043fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8097 	beq.w	8004560 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b83      	ldr	r3, [pc, #524]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b7f      	ldr	r3, [pc, #508]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a7e      	ldr	r2, [pc, #504]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b79      	ldr	r3, [pc, #484]	; (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a75      	ldr	r2, [pc, #468]	; (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fc fc6d 	bl	8000d58 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fc fc69 	bl	8000d58 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e118      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_RCC_OscConfig+0x4b0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x31e>
 80044a8:	4b66      	ldr	r3, [pc, #408]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a65      	ldr	r2, [pc, #404]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x358>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x340>
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a60      	ldr	r2, [pc, #384]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	4b5e      	ldr	r3, [pc, #376]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a5d      	ldr	r2, [pc, #372]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x358>
 80044d8:	4b5a      	ldr	r3, [pc, #360]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a59      	ldr	r2, [pc, #356]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	4b57      	ldr	r3, [pc, #348]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a56      	ldr	r2, [pc, #344]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80044ea:	f023 0304 	bic.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fc fc2e 	bl	8000d58 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc fc2a 	bl	8000d58 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0d7      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b4b      	ldr	r3, [pc, #300]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCC_OscConfig+0x368>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fc fc18 	bl	8000d58 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fc fc14 	bl	8000d58 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0c1      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	4b40      	ldr	r3, [pc, #256]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80ad 	beq.w	80046c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456a:	4b36      	ldr	r3, [pc, #216]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d060      	beq.n	8004638 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d145      	bne.n	800460a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b33      	ldr	r3, [pc, #204]	; (800464c <HAL_RCC_OscConfig+0x4b4>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fc fbe8 	bl	8000d58 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fc fbe4 	bl	8000d58 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e093      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b29      	ldr	r3, [pc, #164]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	071b      	lsls	r3, r3, #28
 80045d6:	491b      	ldr	r1, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_RCC_OscConfig+0x4b4>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fc fbb9 	bl	8000d58 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fc fbb5 	bl	8000d58 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e064      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x452>
 8004608:	e05c      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <HAL_RCC_OscConfig+0x4b4>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fc fba2 	bl	8000d58 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004618:	f7fc fb9e 	bl	8000d58 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e04d      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x480>
 8004636:	e045      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e040      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000
 800464c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004650:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <HAL_RCC_OscConfig+0x538>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d030      	beq.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d129      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d122      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004688:	4293      	cmp	r3, r2
 800468a:	d119      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d10f      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800

080046d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e03f      	b.n	8004766 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc fa02 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2224      	movs	r2, #36	; 0x24
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f829 	bl	8004770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800472c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800473c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800474c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004774:	b0c0      	sub	sp, #256	; 0x100
 8004776:	af00      	add	r7, sp, #0
 8004778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	68d9      	ldr	r1, [r3, #12]
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	ea40 0301 	orr.w	r3, r0, r1
 8004798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047c8:	f021 010c 	bic.w	r1, r1, #12
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047d6:	430b      	orrs	r3, r1
 80047d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ea:	6999      	ldr	r1, [r3, #24]
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	ea40 0301 	orr.w	r3, r0, r1
 80047f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b8f      	ldr	r3, [pc, #572]	; (8004a3c <UART_SetConfig+0x2cc>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d005      	beq.n	8004810 <UART_SetConfig+0xa0>
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b8d      	ldr	r3, [pc, #564]	; (8004a40 <UART_SetConfig+0x2d0>)
 800480c:	429a      	cmp	r2, r3
 800480e:	d104      	bne.n	800481a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004810:	f7ff fa7e 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 8004814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004818:	e003      	b.n	8004822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800481a:	f7ff fa65 	bl	8003ce8 <HAL_RCC_GetPCLK1Freq>
 800481e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482c:	f040 810c 	bne.w	8004a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800483a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800483e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004842:	4622      	mov	r2, r4
 8004844:	462b      	mov	r3, r5
 8004846:	1891      	adds	r1, r2, r2
 8004848:	65b9      	str	r1, [r7, #88]	; 0x58
 800484a:	415b      	adcs	r3, r3
 800484c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800484e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004852:	4621      	mov	r1, r4
 8004854:	eb12 0801 	adds.w	r8, r2, r1
 8004858:	4629      	mov	r1, r5
 800485a:	eb43 0901 	adc.w	r9, r3, r1
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800486e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004872:	4690      	mov	r8, r2
 8004874:	4699      	mov	r9, r3
 8004876:	4623      	mov	r3, r4
 8004878:	eb18 0303 	adds.w	r3, r8, r3
 800487c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004880:	462b      	mov	r3, r5
 8004882:	eb49 0303 	adc.w	r3, r9, r3
 8004886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800489a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800489e:	460b      	mov	r3, r1
 80048a0:	18db      	adds	r3, r3, r3
 80048a2:	653b      	str	r3, [r7, #80]	; 0x50
 80048a4:	4613      	mov	r3, r2
 80048a6:	eb42 0303 	adc.w	r3, r2, r3
 80048aa:	657b      	str	r3, [r7, #84]	; 0x54
 80048ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048b4:	f7fb fca6 	bl	8000204 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b61      	ldr	r3, [pc, #388]	; (8004a44 <UART_SetConfig+0x2d4>)
 80048be:	fba3 2302 	umull	r2, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	011c      	lsls	r4, r3, #4
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	64b9      	str	r1, [r7, #72]	; 0x48
 80048e0:	415b      	adcs	r3, r3
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048e8:	4641      	mov	r1, r8
 80048ea:	eb12 0a01 	adds.w	sl, r2, r1
 80048ee:	4649      	mov	r1, r9
 80048f0:	eb43 0b01 	adc.w	fp, r3, r1
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004908:	4692      	mov	sl, r2
 800490a:	469b      	mov	fp, r3
 800490c:	4643      	mov	r3, r8
 800490e:	eb1a 0303 	adds.w	r3, sl, r3
 8004912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004916:	464b      	mov	r3, r9
 8004918:	eb4b 0303 	adc.w	r3, fp, r3
 800491c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004934:	460b      	mov	r3, r1
 8004936:	18db      	adds	r3, r3, r3
 8004938:	643b      	str	r3, [r7, #64]	; 0x40
 800493a:	4613      	mov	r3, r2
 800493c:	eb42 0303 	adc.w	r3, r2, r3
 8004940:	647b      	str	r3, [r7, #68]	; 0x44
 8004942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800494a:	f7fb fc5b 	bl	8000204 <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4611      	mov	r1, r2
 8004954:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <UART_SetConfig+0x2d4>)
 8004956:	fba3 2301 	umull	r2, r3, r3, r1
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2264      	movs	r2, #100	; 0x64
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	1acb      	subs	r3, r1, r3
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800496a:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <UART_SetConfig+0x2d4>)
 800496c:	fba3 2302 	umull	r2, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004978:	441c      	add	r4, r3
 800497a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497e:	2200      	movs	r2, #0
 8004980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	1891      	adds	r1, r2, r2
 8004992:	63b9      	str	r1, [r7, #56]	; 0x38
 8004994:	415b      	adcs	r3, r3
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800499c:	4641      	mov	r1, r8
 800499e:	1851      	adds	r1, r2, r1
 80049a0:	6339      	str	r1, [r7, #48]	; 0x30
 80049a2:	4649      	mov	r1, r9
 80049a4:	414b      	adcs	r3, r1
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049b4:	4659      	mov	r1, fp
 80049b6:	00cb      	lsls	r3, r1, #3
 80049b8:	4651      	mov	r1, sl
 80049ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049be:	4651      	mov	r1, sl
 80049c0:	00ca      	lsls	r2, r1, #3
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	4642      	mov	r2, r8
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d0:	464b      	mov	r3, r9
 80049d2:	460a      	mov	r2, r1
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049f0:	460b      	mov	r3, r1
 80049f2:	18db      	adds	r3, r3, r3
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049f6:	4613      	mov	r3, r2
 80049f8:	eb42 0303 	adc.w	r3, r2, r3
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a06:	f7fb fbfd 	bl	8000204 <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <UART_SetConfig+0x2d4>)
 8004a10:	fba3 1302 	umull	r1, r3, r3, r2
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	2164      	movs	r1, #100	; 0x64
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	3332      	adds	r3, #50	; 0x32
 8004a22:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <UART_SetConfig+0x2d4>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f003 0207 	and.w	r2, r3, #7
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4422      	add	r2, r4
 8004a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a38:	e105      	b.n	8004c46 <UART_SetConfig+0x4d6>
 8004a3a:	bf00      	nop
 8004a3c:	40011000 	.word	0x40011000
 8004a40:	40011400 	.word	0x40011400
 8004a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a5a:	4642      	mov	r2, r8
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	1891      	adds	r1, r2, r2
 8004a60:	6239      	str	r1, [r7, #32]
 8004a62:	415b      	adcs	r3, r3
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	1854      	adds	r4, r2, r1
 8004a6e:	4649      	mov	r1, r9
 8004a70:	eb43 0501 	adc.w	r5, r3, r1
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	00eb      	lsls	r3, r5, #3
 8004a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a82:	00e2      	lsls	r2, r4, #3
 8004a84:	4614      	mov	r4, r2
 8004a86:	461d      	mov	r5, r3
 8004a88:	4643      	mov	r3, r8
 8004a8a:	18e3      	adds	r3, r4, r3
 8004a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a90:	464b      	mov	r3, r9
 8004a92:	eb45 0303 	adc.w	r3, r5, r3
 8004a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	008b      	lsls	r3, r1, #2
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	008a      	lsls	r2, r1, #2
 8004ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ac8:	f7fb fb9c 	bl	8000204 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b60      	ldr	r3, [pc, #384]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	011c      	lsls	r4, r3, #4
 8004ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	61b9      	str	r1, [r7, #24]
 8004af4:	415b      	adcs	r3, r3
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afc:	4641      	mov	r1, r8
 8004afe:	1851      	adds	r1, r2, r1
 8004b00:	6139      	str	r1, [r7, #16]
 8004b02:	4649      	mov	r1, r9
 8004b04:	414b      	adcs	r3, r1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b14:	4659      	mov	r1, fp
 8004b16:	00cb      	lsls	r3, r1, #3
 8004b18:	4651      	mov	r1, sl
 8004b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1e:	4651      	mov	r1, sl
 8004b20:	00ca      	lsls	r2, r1, #3
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b30:	464b      	mov	r3, r9
 8004b32:	460a      	mov	r2, r1
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b54:	4649      	mov	r1, r9
 8004b56:	008b      	lsls	r3, r1, #2
 8004b58:	4641      	mov	r1, r8
 8004b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b5e:	4641      	mov	r1, r8
 8004b60:	008a      	lsls	r2, r1, #2
 8004b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b66:	f7fb fb4d 	bl	8000204 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a34      	ldr	r2, [pc, #208]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b8e:	441c      	add	r4, r3
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	673b      	str	r3, [r7, #112]	; 0x70
 8004b98:	677a      	str	r2, [r7, #116]	; 0x74
 8004b9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bae:	4641      	mov	r1, r8
 8004bb0:	1851      	adds	r1, r2, r1
 8004bb2:	6039      	str	r1, [r7, #0]
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	414b      	adcs	r3, r1
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bc6:	4659      	mov	r1, fp
 8004bc8:	00cb      	lsls	r3, r1, #3
 8004bca:	4651      	mov	r1, sl
 8004bcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	00ca      	lsls	r2, r1, #3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4642      	mov	r2, r8
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be0:	464b      	mov	r3, r9
 8004be2:	460a      	mov	r2, r1
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf4:	667a      	str	r2, [r7, #100]	; 0x64
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c02:	4649      	mov	r1, r9
 8004c04:	008b      	lsls	r3, r1, #2
 8004c06:	4641      	mov	r1, r8
 8004c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	008a      	lsls	r2, r1, #2
 8004c10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c14:	f7fb faf6 	bl	8000204 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2164      	movs	r1, #100	; 0x64
 8004c26:	fb01 f303 	mul.w	r3, r1, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	3332      	adds	r3, #50	; 0x32
 8004c30:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <UART_SetConfig+0x4e4>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	f003 020f 	and.w	r2, r3, #15
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4422      	add	r2, r4
 8004c44:	609a      	str	r2, [r3, #8]
}
 8004c46:	bf00      	nop
 8004c48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c52:	bf00      	nop
 8004c54:	51eb851f 	.word	0x51eb851f

08004c58 <__libc_init_array>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4d0d      	ldr	r5, [pc, #52]	; (8004c90 <__libc_init_array+0x38>)
 8004c5c:	4c0d      	ldr	r4, [pc, #52]	; (8004c94 <__libc_init_array+0x3c>)
 8004c5e:	1b64      	subs	r4, r4, r5
 8004c60:	10a4      	asrs	r4, r4, #2
 8004c62:	2600      	movs	r6, #0
 8004c64:	42a6      	cmp	r6, r4
 8004c66:	d109      	bne.n	8004c7c <__libc_init_array+0x24>
 8004c68:	4d0b      	ldr	r5, [pc, #44]	; (8004c98 <__libc_init_array+0x40>)
 8004c6a:	4c0c      	ldr	r4, [pc, #48]	; (8004c9c <__libc_init_array+0x44>)
 8004c6c:	f000 f820 	bl	8004cb0 <_init>
 8004c70:	1b64      	subs	r4, r4, r5
 8004c72:	10a4      	asrs	r4, r4, #2
 8004c74:	2600      	movs	r6, #0
 8004c76:	42a6      	cmp	r6, r4
 8004c78:	d105      	bne.n	8004c86 <__libc_init_array+0x2e>
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c80:	4798      	blx	r3
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7ee      	b.n	8004c64 <__libc_init_array+0xc>
 8004c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8a:	4798      	blx	r3
 8004c8c:	3601      	adds	r6, #1
 8004c8e:	e7f2      	b.n	8004c76 <__libc_init_array+0x1e>
 8004c90:	08004ce8 	.word	0x08004ce8
 8004c94:	08004ce8 	.word	0x08004ce8
 8004c98:	08004ce8 	.word	0x08004ce8
 8004c9c:	08004cec 	.word	0x08004cec

08004ca0 <memset>:
 8004ca0:	4402      	add	r2, r0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d100      	bne.n	8004caa <memset+0xa>
 8004ca8:	4770      	bx	lr
 8004caa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cae:	e7f9      	b.n	8004ca4 <memset+0x4>

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
